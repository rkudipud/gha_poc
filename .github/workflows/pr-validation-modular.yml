# Modular PR Validation Workflow
# Description:
# This workflow uses the modular test orchestrator to run configurable test suites
# based on the pr-test-config.yml configuration. It supports:
# - Hard checks (must pass) vs Soft checks (scoring)
# - Configurable weights and thresholds
# - Environment-specific overrides
# - Parallel execution where possible
# - Detailed reporting and issue creation
#
# Architecture:
# 1. Load configuration from pr-test-config.yml
# 2. Execute hard checks first (parallel where possible)
# 3. If hard checks pass, run soft checks for scoring
# 4. Calculate overall score and determine action
# 5. Create issues for failures and update PR status
#
# Last Updated: July 2, 2025
# ==============================================================================

name: Modular PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
  pull_request_review:
    types: [submitted]

concurrency:
  group: pr-validation-modular-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write
  security-events: write
  actions: read

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}
  BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
  HEAD_BRANCH: ${{ github.event.pull_request.head.ref }}
  PR_TITLE: ${{ github.event.pull_request.title }}
  PR_AUTHOR: ${{ github.event.pull_request.user.login }}

jobs:
  # ==============================================================================
  # Configuration Validation
  # ==============================================================================
  validate-config:
    name: Validate Test Configuration
    runs-on: ubuntu-latest
    outputs:
      config-valid: ${{ steps.validate.outputs.valid }}
      environment: ${{ steps.detect-env.outputs.environment }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Environment
        id: detect-env
        run: |
          # Determine environment based on target branch
          if [[ "${{ env.BASE_BRANCH }}" == "main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi
          echo "üåç Detected environment: $(cat $GITHUB_OUTPUT | grep environment | cut -d= -f2)"

      - name: Validate Configuration File
        id: validate
        run: |
          echo "üîç Validating test configuration..."
          
          CONFIG_FILE=".github/pr-test-config.yml"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå Configuration file not found: $CONFIG_FILE"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Install yq for validation
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq
          
          # Basic structure validation
          if ! yq '.global_config.auto_merge_threshold' "$CONFIG_FILE" > /dev/null; then
            echo "‚ùå Invalid configuration: missing global_config.auto_merge_threshold"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if ! yq '.test_suite[]' "$CONFIG_FILE" > /dev/null; then
            echo "‚ùå Invalid configuration: missing or empty test_suite"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate weight totals for soft checks
          TOTAL_WEIGHT=$(yq '.test_suite[] | select(.enforcement == "soft") | .weight' "$CONFIG_FILE" | awk '{sum += $1} END {print sum}')
          if [ "$TOTAL_WEIGHT" -ne 100 ]; then
            echo "‚ö†Ô∏è Warning: Soft check weights total $TOTAL_WEIGHT%, expected 100%"
          fi
          
          echo "‚úÖ Configuration validation passed"
          echo "valid=true" >> $GITHUB_OUTPUT

  # ==============================================================================
  # Main Test Execution
  # ==============================================================================
  execute-tests:
    name: Execute Modular Test Suite
    runs-on: ubuntu-latest
    needs: validate-config
    if: needs.validate-config.outputs.config-valid == 'true'
    outputs:
      overall-result: ${{ steps.run-tests.outputs.overall-result }}
      overall-score: ${{ steps.run-tests.outputs.overall-score }}
      hard-checks-passed: ${{ steps.run-tests.outputs.hard-checks-passed }}
      failed-tests: ${{ steps.run-tests.outputs.failed-tests }}
      test-summary: ${{ steps.run-tests.outputs.test-summary }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Test Environment
        run: |
          echo "üöÄ Setting up test environment for PR #${{ env.PR_NUMBER }}"
          echo "üìã Branch: ${{ env.HEAD_BRANCH }} ‚Üí ${{ env.BASE_BRANCH }}"
          echo "üåç Environment: ${{ needs.validate-config.outputs.environment }}"
          
          # Install required tools
          sudo apt-get update
          sudo apt-get install -y bc jq
          
          # Install yq
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod +x /usr/local/bin/yq

      - name: Execute Modular Test Suite
        id: run-tests
        uses: ./.github/actions/test-orchestrator
        with:
          config-file: '.github/pr-test-config.yml'
          environment: ${{ needs.validate-config.outputs.environment }}
          pr-number: ${{ env.PR_NUMBER }}
          base-branch: ${{ env.BASE_BRANCH }}
          head-branch: ${{ env.HEAD_BRANCH }}
          dry-run: 'false'

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-pr-${{ env.PR_NUMBER }}
          path: |
            test-reports/
            test-logs/
            test-artifacts/
          retention-days: 14

  # ==============================================================================
  # Result Processing and Actions
  # ==============================================================================
  process-results:
    name: Process Test Results
    runs-on: ubuntu-latest
    needs: [validate-config, execute-tests]
    if: always() && needs.validate-config.outputs.config-valid == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Process Test Results
        id: process
        run: |
          echo "üìä Processing test results..."
          
          OVERALL_RESULT="${{ needs.execute-tests.outputs.overall-result }}"
          OVERALL_SCORE="${{ needs.execute-tests.outputs.overall-score }}"
          HARD_CHECKS_PASSED="${{ needs.execute-tests.outputs.hard-checks-passed }}"
          
          echo "Overall Result: $OVERALL_RESULT"
          echo "Overall Score: $OVERALL_SCORE"
          echo "Hard Checks: $HARD_CHECKS_PASSED"
          
          # Determine actions based on result
          case "$OVERALL_RESULT" in
            "pass")
              echo "action=approve" >> $GITHUB_OUTPUT
              echo "message=‚úÖ All checks passed! Score: $OVERALL_SCORE/100. PR approved for auto-merge." >> $GITHUB_OUTPUT
              ;;
            "manual-review")
              echo "action=review" >> $GITHUB_OUTPUT
              echo "message=‚ö†Ô∏è Manual review required. Score: $OVERALL_SCORE/100. Please review failed checks." >> $GITHUB_OUTPUT
              ;;
            "fail")
              echo "action=block" >> $GITHUB_OUTPUT
              if [ "$HARD_CHECKS_PASSED" != "true" ]; then
                echo "message=‚ùå Critical checks failed. PR blocked until hard check failures are resolved." >> $GITHUB_OUTPUT
              else
                echo "message=‚ùå Quality score too low: $OVERALL_SCORE/100. PR blocked until issues are resolved." >> $GITHUB_OUTPUT
              fi
              ;;
            *)
              echo "action=block" >> $GITHUB_OUTPUT
              echo "message=‚ùå Test execution failed or incomplete. Please check workflow logs." >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Create/Update PR Status Check
        uses: actions/github-script@v7
        with:
          script: |
            const result = '${{ needs.execute-tests.outputs.overall-result }}';
            const score = '${{ needs.execute-tests.outputs.overall-score }}';
            
            let state, description;
            switch (result) {
              case 'pass':
                state = 'success';
                description = `‚úÖ All checks passed! Score: ${score}/100`;
                break;
              case 'manual-review':
                state = 'pending';
                description = `‚ö†Ô∏è Manual review required. Score: ${score}/100`;
                break;
              case 'fail':
                state = 'failure';
                description = `‚ùå Checks failed. Score: ${score}/100`;
                break;
              default:
                state = 'error';
                description = '‚ùå Test execution error';
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              description: description,
              context: 'Modular PR Validation'
            });

      - name: Comment on PR with Results
        uses: actions/github-script@v7
        with:
          script: |
            const testSummary = JSON.parse('${{ needs.execute-tests.outputs.test-summary }}');
            const overallResult = '${{ needs.execute-tests.outputs.overall-result }}';
            const overallScore = '${{ needs.execute-tests.outputs.overall-score }}';
            
            let emoji, status;
            switch (overallResult) {
              case 'pass':
                emoji = '‚úÖ';
                status = 'APPROVED FOR AUTO-MERGE';
                break;
              case 'manual-review':
                emoji = '‚ö†Ô∏è';
                status = 'MANUAL REVIEW REQUIRED';
                break;
              case 'fail':
                emoji = '‚ùå';
                status = 'BLOCKED';
                break;
              default:
                emoji = '‚ùì';
                status = 'ERROR';
            }
            
            const body = `
            ## ${emoji} Modular PR Validation Results
            
            **Overall Status**: ${status}  
            **Score**: ${overallScore}/100  
            **Environment**: ${{ needs.validate-config.outputs.environment }}
            
            ### üîí Hard Checks (Must Pass)
            ${testSummary.hard_checks.map(check => 
              `- **${check.name}**: ${check.result === 'pass' ? '‚úÖ PASSED' : '‚ùå FAILED'} - ${check.details}`
            ).join('\n')}
            
            ### üìä Soft Checks (Scoring)
            ${testSummary.soft_checks.map(check => 
              `- **${check.name}** (${check.weight}%): ${check.score}/100 ${check.result === 'pass' ? '‚úÖ' : '‚ùå'} ‚Üí Contribution: ${check.weighted_score.toFixed(1)}`
            ).join('\n')}
            
            ### üìà Score Breakdown
            - **Auto-merge threshold**: ‚â•${testSummary.thresholds.auto_merge}%
            - **Manual review threshold**: ‚â•${testSummary.thresholds.manual_review}%
            - **Your score**: ${overallScore}%
            
            ---
            *Test Run ID: ${testSummary.test_run.id}*  
            *Generated by Modular PR Validation at ${new Date().toISOString()}*
            `;
            
            // Find existing comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ env.PR_NUMBER }}
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('Modular PR Validation Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ env.PR_NUMBER }},
                body: body
              });
            }

  # ==============================================================================
  # Issue Creation for Hard Check Failures
  # ==============================================================================
  create-failure-issues:
    name: Create Issues for Critical Failures
    runs-on: ubuntu-latest
    needs: [execute-tests]
    if: always() && needs.execute-tests.outputs.hard-checks-passed == 'false'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Create Issue for Hard Check Failures
        uses: actions/github-script@v7
        with:
          script: |
            const failedTests = JSON.parse('${{ needs.execute-tests.outputs.failed-tests }}');
            const testSummary = JSON.parse('${{ needs.execute-tests.outputs.test-summary }}');
            
            if (failedTests.length === 0) return;
            
            const failedHardChecks = testSummary.hard_checks.filter(check => check.result !== 'pass');
            
            const title = `üö® Hard Check Failure: PR #${{ env.PR_NUMBER }} - ${failedTests.join(', ')}`;
            
            const body = `
            ## üö® Critical Check Failure
            
            **PR**: #${{ env.PR_NUMBER }} - ${{ env.PR_TITLE }}  
            **Author**: @${{ env.PR_AUTHOR }}  
            **Branch**: ${{ env.HEAD_BRANCH }} ‚Üí ${{ env.BASE_BRANCH }}  
            
            ### Failed Hard Checks
            ${failedHardChecks.map(check => `
            #### ‚ùå ${check.name}
            - **ID**: \`${check.id}\`
            - **Details**: ${check.details}
            - **Timestamp**: ${check.timestamp}
            `).join('\n')}
            
            ### Action Required
            This PR has critical check failures and **cannot be merged** until these issues are resolved.
            
            ### Next Steps
            1. Review the failure details above
            2. Fix the underlying issues in your code
            3. Push new commits to trigger re-validation
            4. This issue will automatically close when all hard checks pass
            
            ### Need Help?
            - Check the [CI/CD Documentation](./CI_CD_SOLUTION.md) for guidance
            - Review the [Quick Start Guide](./QUICK_START.md) for common solutions
            - Contact the development team if you need assistance
            
            ---
            *Auto-generated by Modular PR Validation*  
            *Test Run: ${testSummary.test_run.id}*
            `;
            
            // Check if issue already exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure,hard-check-failure'
            });
            
            const existingIssue = issues.data.find(issue => 
              issue.title.includes(`PR #${{ env.PR_NUMBER }}`) && 
              issue.title.includes('Hard Check Failure')
            );
            
            if (existingIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                title: title,
                body: body
              });
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['ci-failure', 'urgent', 'hard-check-failure'],
                assignees: ['${{ env.PR_AUTHOR }}']
              });
              console.log(`Created new issue #${newIssue.data.number}`);
            }

  # ==============================================================================
  # Auto-close Issues on Success
  # ==============================================================================
  close-success-issues:
    name: Close Issues on Success
    runs-on: ubuntu-latest
    needs: [execute-tests]
    if: needs.execute-tests.outputs.overall-result == 'pass'
    steps:
      - name: Close Related Issues
        uses: actions/github-script@v7
        with:
          script: |
            // Find and close related failure issues
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'ci-failure'
            });
            
            for (const issue of issues.data) {
              if (issue.title.includes(`PR #${{ env.PR_NUMBER }}`)) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: '‚úÖ **Issue Resolved**: All checks are now passing for PR #${{ env.PR_NUMBER }}. Auto-closing this issue.\n\n*Closed automatically by Modular PR Validation*'
                });
                
                console.log(`Closed issue #${issue.number}: ${issue.title}`);
              }
            }
