# might enable concurrency control to prevent redundant runs on the same branch. for later future use
# concurrency:
#   # Concurrency control to prevent redundant runs on the same branch.
#   group: branch-lint-check-${{ github.ref_name }}
#   cancel-in-progress: true

# ===================================================================
# Branch Lint Check Workflow
# -------------------------------------------------------------------
# This workflow is split into two jobs:
#  1) "lint" job:
#     - Caches and installs pip dependencies.
#     - Checks out the repository.
#     - Runs the composite Python linting action (.github/actions/python-lint)
#       which:
#         a) Determines if any Python files have changed (or lints all files if not).
#         b) Runs flake8 in verbose mode to generate a full lint report.
#         c) Runs flake8 with --statistics for a concise summary report.
#         d) Sets outputs: lint-result, log-path (verbose log), stats-log-path (stats log),
#            and changed-files.
#     - Uploads the lint logs as artifacts.
#     - Extracts the branch name.
#     - Fails the job if linting fails (so CI shows the failure).
#
#  2) "issue-management" job:
#     - Always runs irrespective of the lint job outcome.
#     - Checks out the repository.
#     - Determines if there are open lint issues for this branch.
#     - If lint fails and a matching issue is found, updates the issue.
#     - If lint fails and no matching issue is found, creates a new lint issue.
#     - If lint passes (and there are existing issues) AND linting ran (i.e. was not skipped),
#       then closes those issues.
#     - Sends an email with a summary showing a concise status (passed, failed, or skipped)
#       along with a brief explanation.
#     - Appends a brief summary to the GitHub Actions job summary.
#
# NOTE: Do NOT remove any steps. Each step is crucial.
# The composite action ".github/actions/python-lint" encapsulates all the linting logic,
# so the main workflow only needs to call it.

name: Branch Lint Check

on:
  push:
    # Uncomment if you want the workflow to run only on Python file changes:
    # paths:
    #   - '**/*.py'
    # Uncomment to skip main branch:
    # branches-ignore:
    #   - 'main'
  workflow_dispatch:

permissions:
  contents: read        # Read repository content.
  issues: write         # Create, update, and close issues.
  pull-requests: write  # For potential future use.

jobs:
  lint:
    name: Python Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Limit job runtime.
    outputs:
      lint-result: ${{ steps.linting.outputs.lint-result }}    # "pass", "fail", or "skipped"
      branch-name: ${{ steps.branch.outputs.name }}              # Current branch name.
      verbose-log: ${{ steps.linting.outputs.log-path }}         # Path to verbose lint log file.
      stats-log-path: ${{ steps.linting.outputs.stats-log-path }}     # Path to stats lint log file.
    steps:
      # -------------------------------------------------------------------------
      # 1. Cache pip dependencies.
      #    Caches dependencies from requirements.txt to speed up subsequent runs.
      # -------------------------------------------------------------------------
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      # -------------------------------------------------------------------------
      # 2. Checkout the repository.
      #    Retrieves the repository code.
      # -------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'push' && 2 || 0 }}


      # 2.1 Check for changed Python files.
      - name: Check for changed Python files
        id: changed-files
        run: |
          # Get the list of changed files between HEAD and HEAD~1.
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"
          # Check if any changed file ends with .py
          if echo "$CHANGED_FILES" | grep -q "\.py$"; then
            echo "python_files_changed=true"
            echo "python_files_changed=true" >> $GITHUB_OUTPUT
          else
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                echo "python_files_changed=true (manual run, assuming all files changed)"
                echo "python_files_changed=true" >> $GITHUB_OUTPUT
            else
                echo "python_files_changed=false (no Python files changed)"
                echo "python_files_changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      # 4. Set flag to lint only changed files or all files.
      - name: Set changed-only flag
        id: lint_mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changed_only=false" >> $GITHUB_OUTPUT
          else
            echo "changed_only=true" >> $GITHUB_OUTPUT
          fi

      # -------------------------------------------------------------------------
      # 3. Run Python Linting using the composite action.
      #    This action determines changed files (if applicable) and runs flake8 in two modes:
      #      a) Verbose mode (full lint report).
      #      b) Statistics mode (concise summary report).
      #    The action outputs:
      #      - lint-result (pass, fail, or skipped)
      #      - log-path for the verbose report.
      #      - stats-log-path for the summary report.
      #      - changed-files list.
      # -------------------------------------------------------------------------
      - name: Run Python Linting
        id: linting
        if: steps.changed-files.outputs.python_files_changed == 'true'
        uses: ./.github/actions/python-lint
        with:
          changed-only: ${{ steps.lint_mode.outputs.changed_only }}
          python-version: '3.11.1'
        continue-on-error: true

      # 5.1 If no Python files were changed, bypass the linting step.
      - name: Skip Python Linting
        id: skip-linting
        if: steps.changed-files.outputs.python_files_changed == 'false'
        run: |
          echo "No Python files changed. Skipping linting."
          echo "lint-result=skipped" >> $GITHUB_OUTPUT

      # -------------------------------------------------------------------------
      # 4. Upload lint logs as artifacts.
      #    Both the verbose and stats logs are uploaded so users can inspect the details.
      # -------------------------------------------------------------------------
      - name: Upload lint artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lint-artifacts-${{ github.ref_name }}
          path: |
            ${{ steps.linting.outputs.log-path }}
            ${{ steps.linting.outputs.stats-log-path }}
          retention-days: 7


      # -------------------------------------------------------------------------
      # 5. Extract branch name from GITHUB_REF.
      # -------------------------------------------------------------------------
      - name: Get Branch Name
        id: branch
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # -------------------------------------------------------------------------
      # 6. Fail the job if linting failed (for CI visibility).
      #     If the composite action sets lint-result as 'fail', then exit nonzero.
      # -------------------------------------------------------------------------
      - name: Check linting status
        if: steps.linting.outputs.lint-result == 'fail'
        run: |
          echo "Linting failed. Issues were detected in the lint reports."
          exit 1

  issue-management:
    name: Issue Management
    runs-on: ubuntu-latest
    needs: [lint]
    timeout-minutes: 10  # Limit job runtime.
    if: always()  # Always run regardless of lint outcome.
    steps:
      # -------------------------------------------------------------------------
      # 1. Checkout the repository.
      # -------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------------------------------------------------
      # 2. Find all open lint issues for this branch.
      #    Searches for open issues with labels "lint-failure" and the branch name.
      #    NOTE: The 'core' import is commented intentionally.
      # -------------------------------------------------------------------------
      - name: Find all lint issues for this branch
        id: find-lint-issues
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            //const core = require('@actions/core');
            const branchName = "${{ needs.lint.outputs.branch-name }}";
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['lint-failure', `branch:${branchName}`],
              per_page: 100,
            });
            const matchingIssues = issues.data.filter(issue =>
              issue.title.includes(`Lint Failure in branch "${branchName}"`)
            );
            const issueNumbers = matchingIssues.length > 0 ? matchingIssues.map(i => i.number).join(',') : '';
            const exists = matchingIssues.length > 0 ? 'true' : 'false';
            core.setOutput('issue_numbers', issueNumbers);
            core.setOutput('exists', exists);
            return { issue_numbers: issueNumbers, exists: exists };

      # -------------------------------------------------------------------------
      # 3a. Update existing lint issue if linting failed.
      #     Uses the stats log content as the main body with links to artifacts.
      # -------------------------------------------------------------------------
      - name: Update existing lint issue
        if: ${{ success() && (needs.lint.outputs.lint-result == 'fail') && (steps.find-lint-issues.outputs.exists == 'true') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            //const core = require('@actions/core');
            const branchName = "${{ needs.lint.outputs.branch-name }}";
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            const fs = require('fs');
            let statsReport = '';
            try {
              statsReport = fs.readFileSync('${{ steps.linting.outputs.stats-log-path }}', 'utf8');
            } catch (error) {
              statsReport = 'Error reading statistics log.';
            }
            // Placeholder URLs for the uploaded artifacts. Replace with real URLs if available.
            const verboseLink = `[Verbose Report](<artifact-url-verbose>)`;
            const statsLink = `[Stats Report](<artifact-url-stats>)`;
            const commentBody = `## 🔄 New Lint Failures Detected

            ### Updated Commit Information
            - **Commit:** ${context.sha}
            - **Branch:** ${branchName}
            - **Author:** @${actor}
            - **Pushed at:** ${currentDateTime}

            ### Lint Summary Report
            \`\`\`
            ${statsReport}
            \`\`\`

            ### Detailed Logs
            - ${verboseLink}
            - ${statsLink}

            [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            const firstIssueNumber = Number("${{ steps.find-lint-issues.outputs.issue_numbers }}".split(',')[0]);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: firstIssueNumber,
              body: commentBody,
            });

      # -------------------------------------------------------------------------
      # 3b. Create a new lint issue if none exists and linting failed.
      #     Uses the stats log content as the main body and guidance for next steps.
      # -------------------------------------------------------------------------
      - name: Create new lint issue
        if: ${{ success() && (needs.lint.outputs.lint-result == 'fail') && (steps.find-lint-issues.outputs.exists != 'true') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            //const core = require('@actions/core');
            const branchName = "${{ needs.lint.outputs.branch-name }}";
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            const fs = require('fs');
            let statsReport = '';
            try {
              statsReport = fs.readFileSync('${{ steps.linting.outputs.stats-log-path }}', 'utf8');
            } catch (error) {
              statsReport = 'Error reading statistics log.';
            }
            const commentBody = `<!-- LINT-BOT-ISSUE -->
            ## Lint Failures Detected

            ### Commit Information
            - **Commit:** ${context.sha}
            - **Branch:** ${branchName}
            - **Author:** @${actor}
            - **Pushed at:** ${currentDateTime}

            ### Lint Summary Report
            \`\`\`
            ${statsReport}
            \`\`\`

            ### How to Fix
            1. Review the lint summary above.
            2. Fix the reported issues in your code.
            3. Push the fixes to the same branch.
            4. This issue will automatically close once linting passes.

            [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔴 Lint Failure in branch "${branchName}" by @${actor}`,
              body: commentBody,
              assignees: [actor],
              labels: ['lint-failure', 'bug', `branch:${branchName}`],
            });

      # -------------------------------------------------------------------------
      # 4. Close existing lint issues if linting passes.
      #     Posts a comment on each issue and closes it.
      # -------------------------------------------------------------------------
      - name: Close lint issues if lint passes
        if: ${{ success() && (needs.lint.outputs.lint-result == 'pass') && (steps.find-lint-issues.outputs.exists == 'true') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            //const core = require('@actions/core');
            const branchName = "${{ needs.lint.outputs.branch-name }}";
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            const issueNumbers = "${{ steps.find-lint-issues.outputs.issue_numbers }}".split(',').map(s => s.trim()).filter(Boolean);
            for (const issueNumber of issueNumbers) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issueNumber),
                body: `## 🟢 Lint Issues Resolved

                The lint issues were resolved in commit [${sha}](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}) by @${actor} on ${currentDateTime}.

                This issue is now automatically closed.

                [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                `,
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issueNumber),
                state: 'closed',
              });
            }

      # -------------------------------------------------------------------------
      # 5. Send an email summary detailing the lint outcome.
      #     The email displays a concise status along with reasons based on file changes
      #     and trigger type.
      # -------------------------------------------------------------------------
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        if: always()
        continue-on-error: true
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "${{ needs.lint.outputs.lint-result == 'pass' && '✅ Lint Check Passed' || (needs.lint.outputs.lint-result == 'fail' && '❌ Lint Check Failed' || '⚠️ Lint Check Skipped') }}: Branch ${{ needs.lint.outputs.branch-name }}"
          body: |
            Linting Status: ${{ needs.lint.outputs.lint-result }}

            Reason:
            - Passed: All Python files passed the lint checks.
            - Failed: Linting issues were found during verbose linting.
            - Skipped: No Python files changed (unless manually triggered).

            Repository: ${{ github.repository }}
            Branch: ${{ needs.lint.outputs.branch-name }}
            Commit: ${{ github.sha }}
            Time: ${{ steps.date.outputs.date || '(No date available)' }}

            [ View workflow run ](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      # -------------------------------------------------------------------------
      # 6. Append a GitHub Actions workflow summary.
      #     Provides a brief overview including status and a reason.
      # -------------------------------------------------------------------------
      - name: Add workflow summary
        if: always()
        run: |
          echo "## Linting Result: ${{ needs.lint.outputs.lint-result }}" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ needs.lint.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
          echo "Reason:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.lint.outputs.lint-result }}" = "pass" ]; then
            echo "All Python files passed the lint checks." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lint.outputs.lint-result }}" = "fail" ]; then
            echo "Linting issues were detected during the verbose linting run." >> $GITHUB_STEP_SUMMARY
          else
            echo "Linting was skipped because no Python files were changed (unless triggered manually)." >> $GITHUB_STEP_SUMMARY
          fi