#might enabel concurrency control to prevent redundant runs on the same branch. for later future use
#concurrency:
  # Concurrency control to prevent redundant runs on the same branch.
#  group: branch-lint-check-${{ github.ref_name }}
#  cancel-in-progress: true
# ===================================================================
# Branch Lint Check Workflow
# -------------------------------------------------------------------
# This workflow is split into two parallel jobs:
#   1) "lint" job: Caches and installs pip dependencies, runs flake8 linting,
#      uploads lint results, and produces outputs (lint result and branch name).
#   2) "issue-management" job: Uses the "lint" job's outputs. When lint fails,
#      creates or updates an open issue (including a lint summary: errors,
#      warnings, and a sample) and, when lint passes, closes any matching lint issues.
#
# Additional improvements:
# - Caches pip dependencies to avoid reinstalling them on every run.
# - Checks out code with a shallow fetch on push.
# - Timeouts are set to prevent runaway jobs.
# - The "Generate lint summary" step now outputs error count, warning count,
#   and a sample of lint errors which are added to the issue's body.
# ===================================================================

name: Branch Lint Check

on:
  push:
    # Uncomment if you only want the workflow to run on Python file changes:
    # paths:
    #   - '**/*.py'
    # Uncomment to skip main branch:
    # branches-ignore:
    #   - 'main'
  workflow_dispatch:

permissions:
  contents: read        # Read repo content.
  issues: write         # Create, update, and close issues.
  pull-requests: write  # For potential future use.

jobs:
  lint:
    name: Python Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Limit the job runtime.

    outputs:
      # Pass the lint result ("pass" or "fail") to the next job.
      lint_result: ${{ steps.linting.outputs.lint-result }}
      # Pass the branch name to the next job.
      branch_name: ${{ steps.branch.outputs.name }}
      lint_summary_error_count: ${{ steps.lint-summary.outputs.error_count }}
      lint_summary_warning_count: ${{ steps.lint-summary.outputs.warning_count }}
      lint_summary_sample: ${{ steps.lint-summary.outputs.sample }}


    steps:
      # A: Cache pip dependencies to speed up future runs.
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      # B: Checkout the repository.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'push' && 2 || 0 }}

      # C: Get current datetime (UTC) for logs and issue timestamps.
      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      # D: Set flag to lint only changed files for push events, or all files for manual runs.
      - name: Set changed-only flag
        id: lint_mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changed_only=false" >> $GITHUB_OUTPUT
          else
            echo "changed_only=true" >> $GITHUB_OUTPUT
          fi

      # E: Run the composite Python lint action.
      - name: Run Python Linting
        id: linting
        uses: ./.github/actions/python-lint
        with:
          changed-only: ${{ steps.lint_mode.outputs.changed_only }}
        continue-on-error: true

      # F: Upload the lint results log as an artifact.
      - name: Upload lint results
        uses: actions/upload-artifact@v4
        with:
          name: lint-results-${{ github.ref_name }}
          path: ./lint_results.log
          retention-days: 7

      # G: Generate lint summary (error count, warning count, and sample output) if lint fails.
      - name: Generate lint summary
        id: lint-summary
        if: steps.linting.outputs.lint-result == 'fail'
        run: |
          if [ -f "./lint_results.log" ]; then
            ERROR_COUNT=$(grep -c -i "error" ./lint_results.log || echo "0")
            WARNING_COUNT=$(grep -c -i "warning" ./lint_results.log || echo "0")
            SAMPLE=$(head -n 10 ./lint_results.log)
            echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
            echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
            echo "sample<<EOF" >> $GITHUB_OUTPUT
            echo "$SAMPLE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "error_count=0" >> $GITHUB_OUTPUT
            echo "warning_count=0" >> $GITHUB_OUTPUT
            echo "sample=" >> $GITHUB_OUTPUT
          fi

      # H: Extract the branch name from the Git reference.
      - name: Get Branch Name
        id: branch
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # I: Fail this job if linting fails (for CI visibility).
      # The job outputs are still set, so the next job can take action.
      - name: Check linting status
        if: steps.linting.outputs.lint-result == 'fail'
        run: |
          echo "Linting failed, marking job as failed for CI visibility."
          exit 1

  issue-management:
    name: Issue Management
    runs-on: ubuntu-latest
    needs: [lint]          # Run after the lint job.
    timeout-minutes: 10    # Limit this job's runtime.
    if: always()          # Always run, regardless of lint job outcome.

    steps:
      # 1: Checkout repository for context.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2: Find all open lint issues for this branch.
      - name: Find all lint issues for this branch
        id: find-lint-issues
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // const core = require('@actions/core');
            const branchName = "${{ needs.lint.outputs.branch_name }}";
            // Find issues with labels "lint-failure" and "branch:<branchName>"
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['lint-failure', `branch:${branchName}`],
              per_page: 100,
            });
            // Filter issues that include the signature in the title.
            const matchingIssues = issues.data.filter(issue =>
              issue.title.includes(`Lint Failure in branch "${branchName}"`)
            );
            const issueNumbers = matchingIssues.length > 0 ? matchingIssues.map(i => i.number).join(',') : '';
            const exists = matchingIssues.length > 0 ? 'true' : 'false';
            core.setOutput('issue_numbers', issueNumbers);
            core.setOutput('exists', exists);

      # 3a: If lint fails and matching issues exist, update the first issue.
      - name: Update existing lint issue
        if: ${{ success() && (needs.lint.outputs.lint_result == 'fail') && (steps.find-lint-issues.outputs.exists == 'true') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = "${{ needs.lint.outputs.branch_name }}";
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            const fs = require('fs');
            let lintResults = '';
            try {
              lintResults = fs.readFileSync('./lint_results.log', 'utf8');
            } catch (error) {
              lintResults = 'Error reading lint_results.log';
            }
            const errorCount = "${{ needs.lint.outputs.lint_summary_error_count }}";
            const warningCount = "${{ needs.lint.outputs.lint_summary_warning_count }}";
            const sample = "${{ needs.lint.outputs.lint_summary_sample }}";
            const commentBody = `## 🔄 New Lint Failures Detected

            ### Updated Commit Information
            - **Commit:** ${context.sha}
            - **Branch:** ${branchName}
            - **Author:** @${actor}
            - **Pushed at:** ${currentDateTime}

            ### Lint Results
            \`\`\`
            ${lintResults}
            \`\`\`

            ### Lint Summary
            - Errors: ${errorCount}
            - Warnings: ${warningCount}
            - **Sample of lint errors:**
            \`\`\`
            ${sample}
            \`\`\`

            [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            const firstIssueNumber = Number("${{ steps.find-lint-issues.outputs.issue_numbers }}".split(',')[0]);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: firstIssueNumber,
              body: commentBody,
            });

      # 3b: If lint fails and no matching issue exists, create a new issue.
      - name: Create new lint issue
        if: ${{ success() && (needs.lint.outputs.lint_result == 'fail') && (steps.find-lint-issues.outputs.exists != 'true') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = "${{ needs.lint.outputs.branch_name }}";
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            const fs = require('fs');
            let lintResults = '';
            try {
              lintResults = fs.readFileSync('./lint_results.log', 'utf8');
            } catch (error) {
              lintResults = 'Error reading lint_results.log';
            }
            const errorCount = "${{ needs.lint.outputs.lint_summary_error_count }}";
            const warningCount = "${{ needs.lint.outputs.lint_summary_warning_count }}";
            const sample = "${{ needs.lint.outputs.lint_summary_sample }}";
            const issueBody = `<!-- LINT-BOT-ISSUE -->
            ## Lint Failures Detected

            ### Commit Information
            - **Commit:** ${context.sha}
            - **Branch:** ${branchName}
            - **Author:** @${actor}
            - **Pushed at:** ${currentDateTime}

            ### Lint Results
            \`\`\`
            ${lintResults}
            \`\`\`

            ### Lint Summary
            - Errors: ${errorCount}
            - Warnings: ${warningCount}
            - **Sample of lint errors:**
            \`\`\`
            ${sample}
            \`\`\`

            ### How to fix
            1. Review the lint errors above.
            2. Fix these issues in your code.
            3. Push the fixes to the same branch.
            4. This issue will be automatically closed when your code passes the linting check.

            [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔴 Lint Failure in branch "${branchName}" by @${actor}`,
              body: issueBody,
              assignees: [actor],
              labels: ['lint-failure', 'bug', `branch:${branchName}`],
            });

      # 4: If lint passes and matching issues exist, close them.
      - name: Close lint issues if lint passes
        if: ${{ success() && (needs.lint.outputs.lint_result == 'pass') && (steps.find-lint-issues.outputs.exists == 'true') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = "${{ needs.lint.outputs.branch_name }}";
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            const issueNumbers = "${{ steps.find-lint-issues.outputs.issue_numbers }}".split(',').map(s => s.trim()).filter(Boolean);
            for (const issueNumber of issueNumbers) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issueNumber),
                body: `## 🟢 Lint Issues Fixed

                The lint issues have been resolved in commit [${sha}](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}) by @${actor} on ${currentDateTime}.

                This issue is now automatically closed.

                [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                `,
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issueNumber),
                state: 'closed',
              });
            }

      # 5: Send an email summary (works for both pass and fail outcomes).
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        if: always()
        continue-on-error: true
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "${{ needs.lint.outputs.lint_result == 'pass' && '✅ Lint Check Passed' || '❌ Lint Check Failed' }}: Branch ${{ needs.lint.outputs.branch_name }}"
          body: |
            ${{ needs.lint.outputs.lint_result == 'pass' && 'Your recent push has passed all lint checks!' || 'Your recent push contains linting issues that need to be fixed.' }}

            Repository: ${{ github.repository }}
            Branch: ${{ needs.lint.outputs.branch_name }}
            Commit: ${{ github.sha }}
            Time: ${{ steps.date.outputs.date || '(No date available)' }}

            ${{ needs.lint.outputs.lint_result == 'pass' && '🎉 Great job keeping the code clean!' || '⚠️ An issue has been created or updated with details.' }}

            View workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ github.actor }}@github.com
          from: GitHub Actions <${{ secrets.MAIL_USERNAME }}>

      # 6: Add a summary to the GitHub Actions job summary.
      - name: Add workflow summary
        if: always()
        run: |
          echo "## Lint Results: ${{ needs.lint.outputs.lint_result }}" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ needs.lint.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY