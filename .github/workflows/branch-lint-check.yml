# (1) Concurrency control (currently commented out for future use)
# concurrency:
#   group: branch-lint-check-${{ github.ref_name }}
#   cancel-in-progress: true
#
# ==============================================================================
# Branch Lint Check Workflow
# ==============================================================================
# Description:
# (2) "lint" job:
#     (a) Cache and install pip dependencies.
#     (b) Checkout the repository.
#     (c) Check for changed Python files.
#     (d) Set a flag to lint only changed files or all files.
#     (e) Run the composite Python linting action which:
#         - Determines if any Python files have changed (or lints all files if not).
#         - Runs flake8 in verbose mode to generate a detailed lint report.
#         - Runs flake8 with --statistics for a concise summary report.
#         - Sets outputs: lint-result, log-path, stats-log-path, and changed-files.
#     (f) Upload lint artifacts.
#     (g) Extract the branch name.
#     (h) Set the overall lint result for downstream jobs.
#     (i) Fail the job if linting fails (to mark CI as failed).
#
# (3) "issue-management" job:
#     (a) Checkout the repository.
#     (b) Conditionally download lint artifacts (only if linting did not skip).
#     (c) Find open lint issues for the branch.
#     (d) Update an existing lint issue if linting failed.
#     (e) Create a new lint issue if none exists and linting failed.
#     (f) Close lint issues if linting passed.
#     (g) Send an email notification summarizing the lint outcome.
#     (h) Append a final workflow summary to the GitHub Actions run summary.

name: Branch Lint Check

on:
  push:
    # (4) (Optional) Uncomment to run only on Python file changes:
    # paths:
    #   - '**/*.py'
    # (5) (Optional) Uncomment to skip main branch:
    # branches-ignore:
    #   - 'main'
  workflow_dispatch:

permissions:
  contents: read        # (6) Permission to read repository content.
  issues: write         # (7) Permission to create, update, and close issues.
  pull-requests: write   # (8) Permission for potential future use with pull requests.

jobs:
  lint:
    name: Python Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15  # (9) Limits the job runtime.
    outputs:
      lint-result: ${{ steps.check-lint-results.outputs.lint-result }}    # (10) "pass", "fail", or "skipped" from linting.
      branch-name: ${{ steps.branch.outputs.name }}                       # (11) Extracted branch name.
      verbose-log: ${{ steps.linting.outputs.log-path }}                  # (12) Path to the verbose lint log.
      stats-log-path: ${{ steps.linting.outputs.stats-log-path }}         # (13) Path to the concise statistics lint log.
      changed-files: ${{ steps.changed-files.outputs.changed_files }}      # (14) List of changed files.
    steps:
      # -------------------------------------------------------------------------
      # Step 1: Cache pip dependencies.
      #         This caches dependencies defined in requirements.txt to speed up future runs.
      # -------------------------------------------------------------------------
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
        # [1] Ensures package installations are reused between runs.

      # -------------------------------------------------------------------------
      # Step 2: Checkout the repository.
      #         Retrieves the latest code from the repository.
      # -------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'push' && 2 || 0 }}
        # [2] Provides the source code needed for linting.

      # -------------------------------------------------------------------------
      # Step 3: Check for changed Python files.
      #         Determines if Python files have changed to decide whether to run linting.
      # -------------------------------------------------------------------------
      - name: Check for changed Python files
        id: changed-files
        run: |
          # Get the list of files changed between HEAD and HEAD~1.
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          PYTHON_CHANGED_FILES=$(echo "$CHANGED_FILES" | grep '\.py$' || true)
          echo "Changed files: $CHANGED_FILES"
          echo "Python files changed: $PYTHON_CHANGED_FILES"
          if [ -n "$PYTHON_CHANGED_FILES" ]; then
            echo "python_files_changed=true"
            echo "python_files_changed=true" >> $GITHUB_OUTPUT
            # Output as a comma-separated list, properly quoted
            echo "changed_files=$(echo $PYTHON_CHANGED_FILES | paste -sd ',' -)" >> $GITHUB_OUTPUT
          else
            if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                echo "python_files_changed=true (manual run, assuming all files changed)"
                echo "python_files_changed=true" >> $GITHUB_OUTPUT
                echo "changed_files=$(echo $CHANGED_FILES | paste -sd ',' -)" >> $GITHUB_OUTPUT
            else
                echo "python_files_changed=false (no Python files changed)"
                echo "python_files_changed=false" >> $GITHUB_OUTPUT
                echo "changed_files=" >> $GITHUB_OUTPUT
            fi
          fi
        # [3] Decides whether linting is necessary based on file changes.

      # -------------------------------------------------------------------------
      # Step 4: Set changed-only flag.
      #         Determines whether to lint only changed files or the entire codebase.
      # -------------------------------------------------------------------------
      - name: Set changed-only flag
        id: lint_mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changed_only=false" >> $GITHUB_OUTPUT
          else
            echo "changed_only=true" >> $GITHUB_OUTPUT
          fi
        # [4] Adjusts linting behavior according to the trigger type.

      # -------------------------------------------------------------------------
      # Step 6: Skip Python Linting.
      #         Bypasses the linting steps if no Python files have changed.
      # -------------------------------------------------------------------------
      - name: Skip Python Linting
        id: skip-linting
        if: steps.changed-files.outputs.python_files_changed == 'false'
        run: |
          echo "No Python files changed. Skipping linting."
          echo "lint-result=skipped" >> $GITHUB_OUTPUT
        # [6] Marks the lint result as "skipped" when linting is unnecessary.

      # -------------------------------------------------------------------------
      # Step 5: Run Python Linting using the composite action.
      #         Executes the linting action with simple flake8 checking.
      # -------------------------------------------------------------------------
      - name: Run Python Linting
        id: linting
        if: steps.changed-files.outputs.python_files_changed == 'true'
        uses: ./.github/actions/python-lint
        with:
          changed-only: ${{ steps.lint_mode.outputs.changed_only }}
          python-version: '3.11.1'
        continue-on-error: true
        # [5] Invokes the lint action with simple flake8 linting.

     
      # -------------------------------------------------------------------------
      # Step 7: Upload lint artifacts.
      #         Uploads lint log files (verbose and stats) as artifacts for later use.
      # -------------------------------------------------------------------------
      - name: Upload lint artifacts
        if: steps.changed-files.outputs.python_files_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: lint-artifacts-${{ github.ref_name }}
          path: |
            ${{ steps.linting.outputs.log-path }}
            ${{ steps.linting.outputs.stats-log-path }}
          retention-days: 7
        # [7] Makes log files accessible for the issue-management job.

      # -------------------------------------------------------------------------
      # Step 8: Get Branch Name.
      #         Extracts the branch name from the Git reference.
      # -------------------------------------------------------------------------
      - name: Get Branch Name
        id: branch
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        # [8] Provides the branch name for use in further steps.

      # -------------------------------------------------------------------------
      # Step 9: Set lint result.
      #         Merges outputs from either the linting or the skip step.
      # -------------------------------------------------------------------------
      - name: Set lint result
        id: check-lint-results
        run: |
          if [ "${{ steps.changed-files.outputs.python_files_changed }}" = "false" ]; then
            echo "lint-result=skipped" >> $GITHUB_OUTPUT
          else
            echo "lint-result=${{ steps.linting.outputs.lint-result }}" >> $GITHUB_OUTPUT
          fi
        # [9] Consolidates the lint result for downstream processing.

      # -------------------------------------------------------------------------
      # Step 10: Check linting status.
      #          Fails the job if linting resulted in failure.
      # -------------------------------------------------------------------------
      - name: Check linting status
        if: steps.linting.outputs.lint-result == 'fail'
        run: |
          echo "Linting failed. Issues were detected in the lint reports."
          exit 1
        # [10] Ensures that a failure in linting marks the job as failed.

  issue-management:
    name: Issue Management
    runs-on: ubuntu-latest
    needs: [lint]
    timeout-minutes: 10  # (11) Sets a runtime limit for this job.
    if: always()       # (12) Runs regardless of the lint outcome.
    steps:
      # -------------------------------------------------------------------------
      # Step 1: Checkout repository.
      #         Retrieves the full repository for issue management operations.
      # -------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        # [1] Provides repository code for further tasks.

      # -------------------------------------------------------------------------
      # Step 2: Download lint artifacts.
      #         Downloads artifacts generated in the lint job, but only if linting wasn't skipped.
      # -------------------------------------------------------------------------
      - name: Download lint artifacts
        if: ${{ needs.lint.outputs.lint-result != 'skipped' }}
        uses: actions/download-artifact@v4
        with:
          name: lint-artifacts-${{ needs.lint.outputs.branch-name }}
          path: ./  # Artifacts are downloaded to the current directory.
        # [2] Makes the generated log files available for reading only when available.

      # -------------------------------------------------------------------------
      # Step 3: Find all open lint issues for this branch.
      #         Searches for open issues labeled with "lint-failure" and the branch name.
      # -------------------------------------------------------------------------
      - name: Find all lint issues for this branch
        id: find-lint-issues
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            //const core = require('@actions/core');
            const branchName = "${{ needs.lint.outputs.branch-name }}";
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['lint-failure', `branch:${branchName}`],
              per_page: 100,
            });
            const matchingIssues = issues.data.filter(issue =>
              issue.title.includes(`Lint Failure in branch "${branchName}"`)
            );
            const issueNumbers = matchingIssues.length > 0 ? matchingIssues.map(i => i.number).join(',') : '';
            const exists = matchingIssues.length > 0 ? 'true' : 'false';
            core.setOutput('issue_numbers', issueNumbers);
            core.setOutput('exists', exists);
            return { issue_numbers: issueNumbers, exists: exists };
        # [3] Retrieves any existing open lint issue(s) for the branch.

      # -------------------------------------------------------------------------
      # Step 4: Update existing lint issue if linting failed.
      #         Uses the downloaded stats log and changed-files information to update the issue.
      # -------------------------------------------------------------------------
      - name: Update existing lint issue
        if: ${{ success() && (needs.lint.outputs.lint-result == 'fail') && (steps.find-lint-issues.outputs.exists == 'true') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            //const core = require('@actions/core');
            const branchName = "${{ needs.lint.outputs.branch-name }}";
            const changedFiles = `${{ needs.lint.outputs.changed-files }}`;
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            const fs = require('fs');
            let statsReport = '';
            try {
              statsReport = fs.readFileSync('./lint_stats.log', 'utf8');
            } catch (error) {
              statsReport = 'Error reading statistics log.';
            }
            // Placeholder URLs for the uploaded artifacts. Replace with real URLs if available.
            const verboseLink = `[Verbose Report](<artifact-url-verbose>)`;
            const statsLink = `[Stats Report](<artifact-url-stats>)`;
            const commentBody = `## 🔄 New Lint Failures Detected

            ### Updated Commit Information
            - **Commit:** ${context.sha}
            - **Branch:** ${branchName}
            - **Author:** @${actor}
            - **Pushed at:** ${currentDateTime}

            ## Lint Failure
            ### Changed files:
            \`\`\`
            ${changedFiles}
            \`\`\`

            ### Lint Summary Report
            \`\`\`
            ${statsReport}
            \`\`\`

            ### Detailed Logs
            - ${verboseLink}
            - ${statsLink}

            [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            const firstIssueNumber = Number("${{ steps.find-lint-issues.outputs.issue_numbers }}".split(',')[0]);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: firstIssueNumber,
              body: commentBody,
            });
        # [4] Updates an existing lint issue with current log and file-change details.

      # -------------------------------------------------------------------------
      # Step 5: Create a new lint issue if one does not exist.
      #         If linting failed and no current lint issue exists, create a new issue.
      # -------------------------------------------------------------------------
      - name: Create new lint issue
        if: ${{ success() && (needs.lint.outputs.lint-result == 'fail') && (steps.find-lint-issues.outputs.exists != 'true') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            //const core = require('@actions/core');
            const branchName = "${{ needs.lint.outputs.branch-name }}";
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const changedFiles = `${{ needs.lint.outputs.changed-files }}`;
            const currentDateTime = new Date().toISOString();
            const fs = require('fs');
            let statsReport = '';
            try {
              statsReport = fs.readFileSync('./lint_stats.log', 'utf8');
            } catch (error) {
              statsReport = 'Error reading statistics log.';
            }
            const commentBody = `<!-- LINT-BOT-ISSUE -->
            ## Lint Failures Detected

            ### Commit Information
            - **Commit:** ${context.sha}
            - **Branch:** ${branchName}
            - **Author:** @${actor}
            - **Pushed at:** ${currentDateTime}

            ## Lint Failure
            ### Changed files:
            \`\`\`
            ${changedFiles}
            \`\`\`

            ### Lint Summary Report
            \`\`\`
            ${statsReport}
            \`\`\`

            ### How to Fix
            1. Review the lint summary above.
            2. Fix the reported issues in your code.
            3. Push the fixes to the same branch.
            4. This issue will automatically close once linting passes.

            [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔴 Lint Failure in branch "${branchName}" by @${actor}`,
              body: commentBody,
              assignees: [actor],
              labels: ['lint-failure', 'bug', `branch:${branchName}`],
            });
        # [5] Creates a new lint issue with the current log data since no existing issue was found.

      # -------------------------------------------------------------------------
      # Step 6: Close existing lint issues if linting passed.
      #         Comments on and closes any existing lint issues.
      # -------------------------------------------------------------------------
      - name: Close lint issues if lint passes
        if: ${{ success() && (needs.lint.outputs.lint-result == 'pass') && (steps.find-lint-issues.outputs.exists == 'true') }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            //const core = require('@actions/core');
            const branchName = "${{ needs.lint.outputs.branch-name }}";
            const changedFiles = `${{ needs.lint.outputs.changed-files }}`;
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            const issueNumbers = "${{ steps.find-lint-issues.outputs.issue_numbers }}".split(',').map(s => s.trim()).filter(Boolean);
            for (const issueNumber of issueNumbers) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issueNumber),
                body: `## 🟢 Lint Issues Resolved

                ## Lint Failure
                ### Changed files:
                \`\`\`
                ${changedFiles}
                \`\`\`

                The lint issues were resolved in commit [${sha}](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}) by @${actor} on ${currentDateTime}.

                This issue is now automatically closed.

                [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                `,
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issueNumber),
                state: 'closed',
              });
            }
        # [6] Closes all existing lint issues after a successful lint run.

      # -------------------------------------------------------------------------
      # Step 7: Send email notification.
      #         Sends an email summarizing the lint outcome, including details on status.
      # -------------------------------------------------------------------------
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        if: always()
        continue-on-error: true
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "${{ needs.lint.outputs.lint-result == 'pass' && '✅ Lint Check Passed' || (needs.lint.outputs.lint-result == 'fail' && '❌ Lint Check Failed' || '⚠️ Lint Check Skipped') }}: Branch ${{ needs.lint.outputs.branch-name }}"
          body: |
            Linting Status: ${{ needs.lint.outputs.lint-result }}

            Reason:
            - Passed: All Python files passed the lint checks.
            - Failed: Linting issues were found during verbose linting.
            - Skipped: No Python files changed (unless manually triggered).

            Repository: ${{ github.repository }}
            Branch: ${{ needs.lint.outputs.branch-name }}
            Commit: ${{ github.sha }}
            Time: ${{ steps.date.outputs.date || '(No date available)' }}

            [ View workflow run ](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        # [7] Notifies relevant parties via email of the lint result.

      # -------------------------------------------------------------------------
      # Step 8: Append workflow summary.
      #         Adds a final concise summary to the GitHub Actions run summary section.
      # -------------------------------------------------------------------------
      - name: Add workflow summary
        if: always()
        run: |
          echo "## Linting Result: ${{ needs.lint.outputs.lint-result }}" >> $GITHUB_STEP_SUMMARY
          echo "Branch: ${{ needs.lint.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
          echo "Reason:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.lint.outputs.lint-result }}" = "pass" ]; then
            echo "All Python files passed the lint checks." >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.lint.outputs.lint-result }}" = "fail" ]; then
            echo "Linting issues were detected during the verbose linting run." >> $GITHUB_STEP_SUMMARY
          else
            echo "Linting was skipped because no Python files were changed (unless triggered manually)." >> $GITHUB_STEP_SUMMARY
          fi
        # [8] Provides a final summary displayed in the GitHub Actions run.
