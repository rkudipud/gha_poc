# ===================================================================
# Branch Lint Check Workflow
# -------------------------------------------------------------------
# Triggers on pushes to feature branches, scans Python files that 
# were changed in the push, and notifies about linting failures
# ===================================================================

name: Branch Lint Check

# Workflow triggers
on:
  push:
    paths:
      - '**.py'  # Only run when Python files are changed
    #branches-ignore:
    #  - 'main'   # Skip main branch if needed
  workflow_dispatch:  # Allow manual triggering from the GitHub UI

# Add permissions for GitHub API operations
permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  lint:
    name: Python Lint
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code - using latest v4
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to properly determine changed files

      # Step 2: Get current date and time for use throughout the workflow
      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      # Step 3: Run the linting action on changed files only
      - name: Run Python Linting
        id: linting
        shell: bash
        run: |
          # Install linting tools
          python -m pip install --upgrade pip
          pip install flake8
          
          # Create directory for logs if needed
          mkdir -p ./logs
          
          # Get list of changed Python files
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRT HEAD~1 HEAD | grep '\.py$' || echo "")
          
          # If no Python files were changed, mark as passed
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No Python files changed in this push."
            echo "No Python files changed" > ./lint_results.log
            echo "result=pass" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "Linting changed Python files: $CHANGED_FILES"
          
          # Run flake8 with default settings
          flake8 $CHANGED_FILES --max-line-length=100 --output-file=./lint_results.log || true
          
          # Check if lint_results.log contains any content (indicating failures)
          if [ -s ./lint_results.log ]; then
            echo "Lint failed - issues found"
            cat ./lint_results.log
            echo "result=fail" >> $GITHUB_OUTPUT
          else
            echo "Lint passed - no issues found"
            echo "No issues found" > ./lint_results.log
            echo "result=pass" >> $GITHUB_OUTPUT
          fi

      # Step 4: Upload lint results as an artifact for reference
      - name: Upload lint results
        uses: actions/upload-artifact@v4
        with:
          name: lint-results-${{ github.ref_name }}
          path: ./lint_results.log
          retention-days: 7  # How long to keep the logs

      # Step 5: Generate lint summary - SIMPLIFIED
      - name: Generate lint summary
        id: lint-summary
        if: steps.linting.outputs.result == 'fail'
        run: |
          if [ -f "./lint_results.log" ]; then
            # Count number of errors and warnings
            ERROR_COUNT=$(grep -c "error" ./lint_results.log || echo "0")
            WARNING_COUNT=$(grep -c "warning" ./lint_results.log || echo "0")
            
            echo "Found ${ERROR_COUNT} error(s) and ${WARNING_COUNT} warning(s) in linting."
            
            # Get sample of errors (first 10 lines)
            SAMPLE=$(head -n 10 ./lint_results.log)
            
            # Save the counts for later steps
            echo "error_count=${ERROR_COUNT}" >> $GITHUB_OUTPUT
            echo "warning_count=${WARNING_COUNT}" >> $GITHUB_OUTPUT
          else
            echo "No lint_results.log found."
            echo "error_count=0" >> $GITHUB_OUTPUT
            echo "warning_count=0" >> $GITHUB_OUTPUT
          fi

      # Step 6: Get the current branch name
      - name: Get Branch Name
        id: branch
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # Step 7: Check if there's already an open issue for this branch
      - name: Check for existing lint issue
        if: steps.linting.outputs.result == 'fail'
        id: check-issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = context.ref.replace('refs/heads/', '');
            
            try {
              // Search for open issues with the lint-failure label for this branch
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: ['lint-failure', `branch:${branchName}`]
              });
              
              if (issues.data.length > 0) {
                console.log(`Found existing lint issue for branch ${branchName}: #${issues.data[0].number}`);
                return { issue_number: issues.data[0].number, exists: true };
              } else {
                console.log(`No existing lint issue for branch ${branchName}`);
                return { exists: false };
              }
            } catch (error) {
              console.error(`Error checking for existing issues: ${error.message}`);
              return { exists: false };
            }

      # Step 8: Create or update issues based on lint results
      - name: Handle lint issues
        if: steps.linting.outputs.result == 'fail'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const branchName = context.ref.replace('refs/heads/', '');
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            
            // Read the lint results file
            let lintResults = '';
            try {
              lintResults = fs.readFileSync('./lint_results.log', 'utf8');
            } catch (error) {
              console.error(`Error reading lint results: ${error.message}`);
              lintResults = 'Error reading lint results';
            }
            
            // Check for existing issue
            try {
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: ['lint-failure', `branch:${branchName}`]
              });
              
              const issueBody = `## Lint Failures Detected

              ### Commit Information
              - **Commit:** ${context.sha}
              - **Branch:** ${branchName}
              - **Author:** @${actor}
              - **Pushed at:** ${currentDateTime}

              ### Lint Results
              \`\`\`
              ${lintResults}
              \`\`\`

              ### How to fix
              1. Review the lint errors above
              2. Fix these issues in your code
              3. Push the fixes to the same branch
              4. This issue will be automatically closed when your code passes the linting check

              [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                            `;
                            
                            if (issues.data.length > 0) {
                              // Update existing issue
                              const issueNumber = issues.data[0].number;
                              await github.rest.issues.createComment({
                                owner: context.repo.owner,
                                repo: context.repo.repo,
                                issue_number: issueNumber,
                                body: `## 🔄 New Lint Failures Detected
                              
              ### Updated Commit Information
              - **Commit:** ${context.sha}
              - **Branch:** ${branchName}
              - **Author:** @${actor}
              - **Pushed at:** ${currentDateTime}

              ### Lint Results
              \`\`\`
              ${lintResults}
              \`\`\`

              [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                `
                });
                console.log(`Updated lint issue #${issueNumber} with new results`);
              } else {
                // Create new issue
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `🔴 Lint Failure in branch "${branchName}" by @${actor}`,
                  body: issueBody,
                  assignees: [actor],
                  labels: ['lint-failure', 'bug', `branch:${branchName}`]
                });
                console.log(`Created issue #${issue.data.number}: ${issue.data.html_url}`);
              }
            } catch (error) {
              console.error(`Error handling lint issues: ${error.message}`);
            }

      # Step 9: Auto-close any existing issues for this branch if lint check passes
      - name: Auto-close lint issues if check passes
        if: steps.linting.outputs.result == 'pass'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = context.ref.replace('refs/heads/', '');
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();

            try {
              // Search for open issues with the lint-failure label for this specific branch
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: ['lint-failure', `branch:${branchName}`]
              });

              // Close any found issues
              for (const issue of issues.data) {
                console.log(`Auto-closing lint issue #${issue.number} for branch ${branchName}`);
                
                // Add a comment that the issue is fixed
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `## 🟢 Lint Issues Fixed
                  The lint issues have been resolved in commit [${sha}](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}) by @${actor} on ${currentDateTime}.

                  This issue is now automatically closed.

                  [View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                  `
                });

                // Close the issue
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed'
                });
              }
              
              if (issues.data.length > 0) {
                console.log(`Closed ${issues.data.length} lint issue(s) for branch ${branchName}.`);
              } else {
                console.log(`No open lint issues to close for branch ${branchName}.`);
              }
            } catch (error) {
              console.error(`Error closing issues: ${error.message}`);
            }

      # Step 10: Send email notification based on result
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        if: always()
        continue-on-error: true
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: ${{ steps.linting.outputs.result == 'pass' && '✅ Lint Check Passed' || '❌ Lint Check Failed' }}: Branch ${{ steps.branch.outputs.name }}
          body: |
            ${{ steps.linting.outputs.result == 'pass' && 'Your recent push has passed all lint checks.' || 'Your recent push contains linting issues that need to be fixed.' }}
            
            Repository: ${{ github.repository }}
            Branch: ${{ steps.branch.outputs.name }}
            Commit: ${{ github.sha }}
            Time: ${{ steps.date.outputs.date }}
            
            ${{ steps.linting.outputs.result == 'pass' && '🎉 Great job keeping the code clean!' || '⚠️ An issue has been created or updated with details.' }}
            
            View workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ github.actor }}@github.com
          from: GitHub Actions <${{ secrets.MAIL_USERNAME }}>

      # Step 11: Fail the workflow if linting failed (for CI status)
      - name: Check linting status
        if: steps.linting.outputs.result == 'fail'
        run: |
          echo "Linting failed! Please fix the issues. An issue has been created or updated to track this."
          exit 1