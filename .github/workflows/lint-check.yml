# ===================================================================
# Branch Lint Check Workflow
# -------------------------------------------------------------------
# This workflow has been split into two jobs for parallelization:
#   1) "lint" job: Caches and installs pip deps, runs flake8 linting,
#      uploads lint results, and sets job outputs (pass/fail + branch).
#   2) "issue-management" job: Uses the "lint" job's outputs. If lint fails,
#      creates or updates an open issue. If lint passes, closes any matching lint issues.
#
# Additional Improvements:
# - Caches pip dependencies to avoid reinstalling each run.
# - Added a checkout with shallow fetch depth on push (to speed up).
# - Added timeouts to both jobs to prevent runaway.
# - Composite lint action remains in place, but you can factor out flake8 install/caching further if desired.
# ===================================================================

name: Branch Lint Check

on:
  push:
  workflow_dispatch:

permissions:
  contents: read        # Required to read repo content
  issues: write         # Required for creating/updating/closing issues
  pull-requests: write  # Not used directly, but good for future expansions

jobs:
  lint:
    name: Python Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Limit this job to 15 minutes

    outputs:
      # Pass lint results to next job
      lint_result: ${{ steps.linting.outputs.lint-result }}
      # Pass the branch name to next job
      branch_name: ${{ steps.branch.outputs.name }}

    steps:
      # Step A: Cache pip dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      # Step B: Checkout code with minimal depth on push
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'push' && 2 || 0 }}

      # Step C: Get current datetime for logs/issues
      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      # Step D: Decide if we only lint changed files (push) or all (manual run)
      - name: Set changed-only flag
        id: lint_mode
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "changed_only=false" >> $GITHUB_OUTPUT
          else
            echo "changed_only=true" >> $GITHUB_OUTPUT
          fi

      # Step E: Run your composite Python lint action
      - name: Run Python Linting
        id: linting
        uses: ./.github/actions/python-lint
        with:
          changed-only: ${{ steps.lint_mode.outputs.changed_only }}
        continue-on-error: true

      # Step F: Save lint results as an artifact (if there is a log)
      - name: Upload lint results
        uses: actions/upload-artifact@v4
        with:
          name: lint-results-${{ github.ref_name }}
          path: ./lint_results.log
          retention-days: 7

      # Step G: Generate lint summary if "fail"
      - name: Generate lint summary
        id: lint-summary
        if: steps.linting.outputs.lint-result == 'fail'
        run: |
          if [ -f "./lint_results.log" ]; then
            ERROR_COUNT=$(grep -c -i "error" ./lint_results.log || echo "0")
            WARNING_COUNT=$(grep -c -i "warning" ./lint_results.log || echo "0")
            SAMPLE=$(head -n 10 ./lint_results.log)
            echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
            echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT
            echo "sample<<EOF" >> $GITHUB_OUTPUT
            echo "$SAMPLE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "error_count=0" >> $GITHUB_OUTPUT
            echo "warning_count=0" >> $GITHUB_OUTPUT
            echo "sample=" >> $GITHUB_OUTPUT
          fi

      # Step H: Extract the branch name for labeling issues
      - name: Get Branch Name
        id: branch
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      # Step I: Fail the job if linting failed (for job status)
      # We'll still set job outputs for the next job, but error out so
      # that parallel tasks see this job as "failed" if lint is failing.
      - name: Check linting status
        if: steps.linting.outputs.lint-result == 'fail'
        run: |
          echo "Linting failed, marking job as failed for CI visibility."
          exit 1

  issue-management:
    name: Issue Management
    runs-on: ubuntu-latest
    needs: [lint]          # Depends on the lint job finishing
    timeout-minutes: 10    # Limit this job to 10 minutes

    # This job uses the "lint_result" and "branch_name" outputs from the lint job.
    if: always()  # We want to always run, even if the lint job fails
    steps:
      # Step 1: Check out code if needed (not strictly required, but safe)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Find all open lint issues for this branch if lint_result is 'fail' or 'pass'
      - name: Find all lint issues for this branch
        id: find-lint-issues
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            if ("${{ needs.lint.outputs.lint_result }}" !== "") {
              const branchName = "${{ needs.lint.outputs.branch_name }}";
              // Find all open issues with lint-failure AND branch:<branchName> labels
              const issues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                labels: ['lint-failure', `branch:${branchName}`],
                per_page: 100,
              });
              // Filter issues whose title matches the workflow's signature
              const matchingIssues = issues.data
                .filter(issue => issue.title.includes(`Lint Failure in branch "${branchName}"`));
              if (matchingIssues.length > 0) {
                console.log(`Found matching issues: ${matchingIssues.map(i=>i.number).join(',')}`);
                return { issue_numbers: matchingIssues.map(i=>i.number).join(','), exists: true };
              } else {
                return { issue_numbers: '', exists: false };
              }
            } else {
              // If for some reason lint_result is empty
              return { issue_numbers: '', exists: false };
            }

      # Step 3a: If lint is FAIL and issues exist, update the first one
      - name: Update existing lint issue
        if: ${{ needs.lint.outputs.lint_result == 'fail' && steps.find-lint-issues.outputs.exists == 'true' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const branchName = "${{ needs.lint.outputs.branch_name }}";
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            let lintResults = '';
            try {
              lintResults = fs.readFileSync('./lint_results.log', 'utf8');
            } catch (error) {
              lintResults = 'Error reading lint_results.log';
            }
            const firstIssueNumber = Number(`${{ steps.find-lint-issues.outputs.issue_numbers }}`.split(',')[0]);
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: firstIssueNumber,
              body: `## 🔄 New Lint Failures Detected

### Updated Commit Information
- **Commit:** ${context.sha}
- **Branch:** ${branchName}
- **Author:** @${actor}
- **Pushed at:** ${currentDateTime}

### Lint Results
\`\`\`
${lintResults}
\`\`\`

[View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              `,
            });

      # Step 3b: If lint is FAIL and no issues exist, create a new lint issue
      - name: Create new lint issue
        if: ${{ needs.lint.outputs.lint_result == 'fail' && steps.find-lint-issues.outputs.exists != 'true' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const branchName = "${{ needs.lint.outputs.branch_name }}";
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            let lintResults = '';
            try {
              lintResults = fs.readFileSync('./lint_results.log', 'utf8');
            } catch (error) {
              lintResults = 'Error reading lint_results.log';
            }
            const issueBody = `<!-- LINT-BOT-ISSUE -->
## Lint Failures Detected

### Commit Information
- **Commit:** ${context.sha}
- **Branch:** ${branchName}
- **Author:** @${actor}
- **Pushed at:** ${currentDateTime}

### Lint Results
\`\`\`
${lintResults}
\`\`\`

### How to fix
1. Review the lint errors above
2. Fix these issues in your code
3. Push the fixes to the same branch
4. This issue will be automatically closed when your code passes the linting check

[View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            `;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🔴 Lint Failure in branch "${branchName}" by @${actor}`,
              body: issueBody,
              assignees: [actor],
              labels: ['lint-failure', 'bug', `branch:${branchName}`],
            });

      # Step 4: If lint is PASS and there's an existing issue, close them
      - name: Close lint issues if lint passes
        if: ${{ needs.lint.outputs.lint_result == 'pass' && steps.find-lint-issues.outputs.exists == 'true' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = "${{ needs.lint.outputs.branch_name }}";
            const actor = context.actor;
            const sha = context.sha.substring(0, 7);
            const currentDateTime = new Date().toISOString();
            const issueNumbers = `${{ steps.find-lint-issues.outputs.issue_numbers }}`.split(',').map(s=>s.trim()).filter(Boolean);
            for (const issueNumber of issueNumbers) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issueNumber),
                body: `## 🟢 Lint Issues Fixed

The lint issues have been resolved in commit [${sha}](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}) by @${actor} on ${currentDateTime}.

This issue is now automatically closed.

[View workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                `,
              });
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issueNumber),
                state: 'closed',
              });

      # Step 5: Always send an email summary (success or failure).
      # We rely on the lint job's outputs for pass/fail, but we run it here for consistency.
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        if: always()
        continue-on-error: true
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: ${{ needs.lint.outputs.lint_result == 'pass' && '✅ Lint Check Passed' || '❌ Lint Check Failed' }}: Branch ${{ needs.lint.outputs.branch_name }}
          body: |
            ${{ needs.lint.outputs.lint_result == 'pass' && 'Your recent push has passed all lint checks!' || 'Your recent push contains linting issues that need to be fixed.' }}

            Repository: ${{ github.repository }}
            Branch: ${{ needs.lint.outputs.branch_name }}
            Commit: ${{ github.sha }}
            Time: ${{ steps.date.outputs.date || '(No date available)' }}

            ${{ needs.lint.outputs.lint_result == 'pass' && '🎉 Great job keeping the code clean!' || '⚠️ An issue has been created or updated with details.' }}

            View workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ github.actor }}@github.com
          from: GitHub Actions <${{ secrets.MAIL_USERNAME }}>