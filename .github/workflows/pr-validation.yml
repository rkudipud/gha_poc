# ==============================================================================
# Simple Pull Request Validation
# ==============================================================================
# Description:
# This workflow validates PRs by ensuring:
# 1. The source branch has no open lint issues
# 2. Basic quality checks pass
# 3. Auto-approves merge if all checks pass
#
# ==============================================================================

name: Simple PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write
  issues: read

jobs:
  validate_pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # -------------------------------------------------------------------------
      # Step 1: Checkout repository
      # -------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------------------------------------------------
      # Step 2: Check for open lint issues on source branch
      # -------------------------------------------------------------------------
      - name: Check for open lint issues
        id: check-issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = "${{ github.event.pull_request.head.ref }}";
            
            console.log(`üîç Checking for open lint issues on branch: ${branchName}`);
            
            // Search for open lint issues on this branch
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['lint-failure', `branch:${branchName}`],
              per_page: 100,
            });
            
            const openIssues = issues.data.filter(issue =>
              issue.title.includes(`Lint Failure in branch "${branchName}"`)
            );
            
            if (openIssues.length > 0) {
              console.log(`‚ùå Found ${openIssues.length} open lint issue(s) on branch ${branchName}`);
              core.setFailed(`Branch ${branchName} has ${openIssues.length} open lint issue(s). Please fix them before merging.`);
              
              // Create a comment with issue details
              const issueLinks = openIssues.map(issue => `#${issue.number}`).join(', ');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ùå **PR Validation Failed**\n\nThe source branch \`${branchName}\` has open lint issues: ${issueLinks}\n\nPlease fix these issues before the PR can be merged.`
              });
              
              return false;
            } else {
              console.log(`‚úÖ No open lint issues found on branch ${branchName}`);
              return true;
            }

      # -------------------------------------------------------------------------
      # Step 3: Basic quality check
      # -------------------------------------------------------------------------
      - name: Basic quality check
        if: steps.check-issues.outcome == 'success'
        run: |
          echo "üîç Running basic quality checks..."
          
          # Check for Python syntax errors
          PYTHON_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} --diff-filter=AM | grep '\.py$' || true)
          
          if [ -n "$PYTHON_FILES" ]; then
            echo "üìÅ Checking Python files: $PYTHON_FILES"
            
            for file in $PYTHON_FILES; do
              if [ -f "$file" ]; then
                echo "   Checking syntax: $file"
                python -m py_compile "$file"
                if [ $? -ne 0 ]; then
                  echo "‚ùå Syntax error in $file"
                  exit 1
                fi
              fi
            done
            
            echo "‚úÖ All Python files have valid syntax"
          else
            echo "‚ÑπÔ∏è No Python files changed"
          fi
          
          echo "‚úÖ Basic quality checks passed"

      # -------------------------------------------------------------------------
      # Step 4: Update PR status
      # -------------------------------------------------------------------------
      - name: Update PR status
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issuesResult = '${{ steps.check-issues.outcome }}';
            const qualityResult = '${{ job.status }}';
            
            let status, message, description;
            
            if (issuesResult === 'success' && qualityResult === 'success') {
              status = 'success';
              message = '‚úÖ PR Validation Passed';
              description = 'No open lint issues and quality checks passed';
              
              // Add success comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚úÖ **PR Validation Passed**\n\n- ‚úÖ No open lint issues on source branch\n- ‚úÖ Basic quality checks passed\n\nThis PR is ready for review and merge.`
              });
            } else {
              status = 'failure';
              message = '‚ùå PR Validation Failed';
              description = 'Open lint issues or quality checks failed';
            }
            
            // Update commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: status,
              context: 'Simple PR Validation',
              description: description
            });
            
            console.log(`${message}: ${description}`);
            ---
            
            <details>
            <summary>üîß Configuration Details</summary>
            
            **Thresholds:**
            - Auto-merge: ‚â•85%
            - Manual review: ‚â•65%
            - Block merge: <65%
            
            **Weight Distribution:**
            - Code Quality: 25%
            - Security: 20%
            - Testing: 25%
            - Documentation: 15%
            - Compliance: 15%
            
            **Validation Time:** $(date -u)
            **Workflow:** Modular PR Validation v2.1.0
            </details>
            
            *This is an automated assessment. For questions about specific checks, consult the [PR validation documentation](devops/docs/pr-validation.md).*
            `;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ env.pr_number }},
              body: comment
            });
            
            console.log('‚úÖ PR status updated successfully with comprehensive feedback');

  # ==============================================================================
  # Auto-Merge Execution
  # ==============================================================================
  auto_merge:
    name: Execute Auto-Merge
    runs-on: ubuntu-latest
    needs: [make_decision]
    if: needs.make_decision.outputs.decision == 'auto_merge'
    timeout-minutes: 5
    steps:
      - name: Enable auto-merge
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.pulls.enableAutoMerge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ env.pr_number }},
              merge_method: 'squash'
            });
            
            console.log('‚úÖ Auto-merge enabled for PR #${{ env.pr_number }}');

  # ==============================================================================
  # Notification and Cleanup
  # ==============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [make_decision]
    if: always() && needs.make_decision.result != 'skipped'
    steps:
      - name: Send notification
        run: |
          # Send notifications based on PR validation results
          decision="${{ needs.make_decision.outputs.decision }}"
          score="${{ needs.make_decision.outputs.final_score }}"
          pr_url="${{ github.event.pull_request.html_url }}"
          
          echo "üìß Preparing notifications for PR #${{ env.pr_number }}"
          echo "   Decision: $decision"
          echo "   Score: $score%"
          echo "   URL: $pr_url"
          
          # Determine notification urgency
          case "$decision" in
            "auto_merge")
              urgency="info"
              message="‚úÖ PR #${{ env.pr_number }} approved for auto-merge (Score: $score%)"
              ;;
            "manual_review")
              urgency="warning"
              message="‚ö†Ô∏è PR #${{ env.pr_number }} requires manual review (Score: $score%)"
              ;;
            "blocked")
              urgency="error"
              message="‚ùå PR #${{ env.pr_number }} blocked by validation (Score: $score%)"
              ;;
          esac
          
          echo "üì§ Notification: [$urgency] $message"
          
          # Here you would integrate with your notification system:
          # - Email via SendGrid/AWS SES
          # - Slack via webhook
          # - Microsoft Teams
          # - PagerDuty for critical issues
          
          # Example commands (uncomment and configure as needed):
          # curl -X POST "$SLACK_WEBHOOK" -d "{\"text\":\"$message\"}"
          # aws ses send-email --to team@company.com --subject "PR Validation" --text "$message"
          
          echo "‚úÖ Notification prepared (configure endpoints to enable actual sending)"
        continue-on-error: true

# ==============================================================================
# Workflow Helper Functions and Utilities
# 
# Useful Commands for Debugging:
# 
# 1. Test Configuration Locally:
#    python -c "import yaml; print('‚úÖ Valid' if yaml.safe_load(open('.github/pr-test-config.yml')) else '‚ùå Invalid')"
# 
# 2. View Current Thresholds:
#    grep -E "(auto_merge_threshold|manual_review_threshold)" .github/pr-test-config.yml
# 
# 3. Check Workflow Syntax:
#    act --list  # if you have 'act' installed for local testing
# 
# 4. Backup Configuration:
#    cp .github/pr-test-config.yml .github/pr-test-config.yml.$(date +%Y%m%d)
# 
# 5. View Validation History:
#    gh api repos/:owner/:repo/actions/runs --jq '.workflow_runs[].conclusion' | head -10
# 
# 6. Re-run Failed Validation:
#    gh api repos/:owner/:repo/actions/runs/:run_id/rerun
# 
# Troubleshooting:
# 
# ‚Ä¢ Snake case still being enforced?
#   Check: devops/consistency_checker/checker_config.yml
#   Ensure: naming_conventions is in disabled_rules
# 
# ‚Ä¢ Hard checks failing?
#   Review: Security scan results and syntax errors
#   Fix: Critical vulnerabilities and Python syntax issues
# 
# ‚Ä¢ Low scores?
#   Improve: Test coverage, documentation, linting
#   Consider: Adjusting weights in pr-test-config.yml
# 
# ‚Ä¢ Auto-merge not working?
#   Verify: Score ‚â• auto_merge_threshold
#   Check: All hard checks passed
#   Ensure: Required GitHub checks are enabled
# 
# Documentation: devops/docs/pr-validation.md
# Support: devops-team@company.com
# ==============================================================================
