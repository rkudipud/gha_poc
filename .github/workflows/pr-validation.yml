# ==============================================================================
# Simple Pull Request Validation with Auto-Merge
# ==============================================================================
# Description:
# This workflow validates PRs by ensuring:
# 1. The source branch has no open lint issues
# 2. Basic quality checks pass
# 3. Auto-merges if all checks pass
#
# ==============================================================================

name: Simple PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

permissions:
  contents: write
  pull-requests: write
  issues: read
  checks: write

jobs:
  validate_pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      validation_passed: ${{ steps.validation-result.outputs.passed }}
      can_auto_merge: ${{ steps.validation-result.outputs.can_auto_merge }}
    steps:
      # -------------------------------------------------------------------------
      # Step 1: Checkout repository
      # -------------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------------------------------------------------------------------------
      # Step 2: Check for open lint issues on source branch
      # -------------------------------------------------------------------------
      - name: Check for open lint issues
        id: check-issues
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = "${{ github.event.pull_request.head.ref }}";
            
            console.log(`üîç Checking for open lint issues on branch: ${branchName}`);
            
            // Search for open lint issues on this branch
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['lint-failure', `branch:${branchName}`],
              per_page: 100,
            });
            
            const openIssues = issues.data.filter(issue =>
              issue.title.includes(`Lint Failure in branch "${branchName}"`)
            );
            
            if (openIssues.length > 0) {
              console.log(`‚ùå Found ${openIssues.length} open lint issue(s) on branch ${branchName}`);
              core.setOutput('has_issues', 'true');
              
              // Create a comment with issue details
              const issueLinks = openIssues.map(issue => `#${issue.number}`).join(', ');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `‚ùå **PR Validation Failed**\n\nThe source branch \`${branchName}\` has open lint issues: ${issueLinks}\n\nPlease fix these issues before the PR can be merged.`
              });
              
              return false;
            } else {
              console.log(`‚úÖ No open lint issues found on branch ${branchName}`);
              core.setOutput('has_issues', 'false');
              return true;
            }

      # -------------------------------------------------------------------------
      # Step 3: Basic quality check
      # -------------------------------------------------------------------------
      - name: Basic quality check
        id: quality-check
        if: steps.check-issues.outputs.has_issues == 'false'
        run: |
          echo "üîç Running basic quality checks..."
          
          # Check for Python syntax errors
          PYTHON_FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} --diff-filter=AM | grep '\.py$' || true)
          
          if [ -n "$PYTHON_FILES" ]; then
            echo "üìÅ Checking Python files: $PYTHON_FILES"
            
            for file in $PYTHON_FILES; do
              if [ -f "$file" ]; then
                echo "   Checking syntax: $file"
                python -m py_compile "$file"
                if [ $? -ne 0 ]; then
                  echo "‚ùå Syntax error in $file"
                  echo "quality_passed=false" >> $GITHUB_OUTPUT
                  exit 1
                fi
              fi
            done
            
            echo "‚úÖ All Python files have valid syntax"
          else
            echo "‚ÑπÔ∏è No Python files changed"
          fi
          
          echo "‚úÖ Basic quality checks passed"
          echo "quality_passed=true" >> $GITHUB_OUTPUT

      # -------------------------------------------------------------------------
      # Step 4: Determine validation result
      # -------------------------------------------------------------------------
      - name: Determine validation result
        id: validation-result
        if: always()
        run: |
          ISSUES_CHECK="${{ steps.check-issues.outputs.has_issues }}"
          QUALITY_CHECK="${{ steps.quality-check.outputs.quality_passed }}"
          
          if [ "$ISSUES_CHECK" == "false" ] && [ "$QUALITY_CHECK" == "true" ]; then
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "can_auto_merge=true" >> $GITHUB_OUTPUT
            echo "‚úÖ All validation checks passed - PR ready for auto-merge"
          else
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "can_auto_merge=false" >> $GITHUB_OUTPUT
            echo "‚ùå Validation failed - manual review required"
          fi

      # -------------------------------------------------------------------------
      # Step 5: Update PR status and comment
      # -------------------------------------------------------------------------
      - name: Update PR status and auto-approve
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const validationPassed = '${{ steps.validation-result.outputs.passed }}' === 'true';
            const canAutoMerge = '${{ steps.validation-result.outputs.can_auto_merge }}' === 'true';
            
            let status, message, description, commentBody;
            
            if (validationPassed && canAutoMerge) {
              status = 'success';
              message = '‚úÖ PR Validation Passed';
              description = 'No open lint issues and quality checks passed - Ready for auto-merge';
              commentBody = `‚úÖ **PR Validation Passed**\n\n- ‚úÖ No open lint issues on source branch\n- ‚úÖ Basic quality checks passed\n\nüöÄ **Auto-merge will be initiated shortly.**`;
            } else {
              message = '‚ùå PR Validation Failed';
              description = 'Open lint issues or quality checks failed';
              commentBody = `‚ùå **PR Validation Failed**\n\nPlease fix the issues and push new commits to trigger re-validation.`;
            }
            
            // Update commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: status,
              context: 'Simple PR Validation',
              description: description
            });
            
            // Add comment only if validation passed (failure comments are added earlier)
            if (validationPassed) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
            
            console.log(`${message}: ${description}`);

  # ==============================================================================
  # Auto-Merge Execution
  # ==============================================================================
  auto_merge:
    name: Execute Auto-Merge
    runs-on: ubuntu-latest
    needs: [validate_pr]
    if: needs.validate_pr.outputs.can_auto_merge == 'true'
    timeout-minutes: 5
    steps:
      - name: Enable auto-merge
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            
            console.log(`üöÄ Enabling auto-merge for PR #${prNumber}`);
            
            try {
              // Enable auto-merge with squash method
              await github.rest.pulls.enableAutoMerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash'
              });
              
              console.log(`‚úÖ Auto-merge enabled for PR #${prNumber}`);
              
              // Add a comment to notify about auto-merge
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `üöÄ **Auto-merge enabled!**\n\nThis PR will be automatically merged once all required status checks pass.\n\n**Merge method:** Squash and merge\n**Triggered by:** Successful validation (no open lint issues + quality checks passed)`
              });
              
            } catch (error) {
              console.error('‚ùå Failed to enable auto-merge:', error.message);
              
              // Fallback: Try to merge directly if auto-merge is not available
              if (error.message.includes('auto-merge is not enabled')) {
                console.log('üîÑ Auto-merge not enabled on repo, attempting direct merge...');
                
                try {
                  await github.rest.pulls.merge({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber,
                    merge_method: 'squash',
                    commit_title: `Merge PR #${prNumber}: ${{ github.event.pull_request.title }}`,
                    commit_message: 'Auto-merged by GitHub Actions after successful validation'
                  });
                  
                  console.log(`‚úÖ PR #${prNumber} merged successfully`);
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: `‚úÖ **PR Merged Successfully!**\n\nThis PR was automatically merged after passing all validation checks.\n\n**Merge method:** Squash and merge`
                  });
                  
                } catch (mergeError) {
                  console.error('‚ùå Direct merge also failed:', mergeError.message);
                  core.setFailed(`Failed to auto-merge PR: ${mergeError.message}`);
                }
              } else {
                core.setFailed(`Failed to enable auto-merge: ${error.message}`);
              }
            }

  # ==============================================================================
  # Notification (Optional)
  # ==============================================================================
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [validate_pr, auto_merge]
    if: always() && needs.validate_pr.result != 'skipped'
    steps:
      - name: Send notification
        run: |
          # Send notifications based on PR validation results
          validation_passed="${{ needs.validate_pr.outputs.validation_passed }}"
          can_auto_merge="${{ needs.validate_pr.outputs.can_auto_merge }}"
          auto_merge_result="${{ needs.auto_merge.result }}"
          pr_url="${{ github.event.pull_request.html_url }}"
          pr_number="${{ github.event.pull_request.number }}"
          
          echo "üìß Preparing notifications for PR #${pr_number}"
          echo "   Validation passed: $validation_passed"
          echo "   Can auto-merge: $can_auto_merge"
          echo "   Auto-merge result: $auto_merge_result"
          echo "   URL: $pr_url"
          
          # Determine notification message
          if [ "$validation_passed" == "true" ] && [ "$can_auto_merge" == "true" ]; then
            if [ "$auto_merge_result" == "success" ]; then
              urgency="info"
              message="‚úÖ PR #${pr_number} successfully auto-merged"
            else
              urgency="warning" 
              message="‚ö†Ô∏è PR #${pr_number} validated but auto-merge failed"
            fi
          else
            urgency="error"
            message="‚ùå PR #${pr_number} failed validation"
          fi
          
          echo "üì§ Notification: [$urgency] $message"
          
          # Here you would integrate with your notification system:
          # - Email via SendGrid/AWS SES
          # - Slack via webhook
          # - Microsoft Teams
          # - PagerDuty for critical issues
          
          # Example commands (uncomment and configure as needed):
          # curl -X POST "$SLACK_WEBHOOK" -d "{\"text\":\"$message\"}"
          # aws ses send-email --to team@company.com --subject "PR Validation" --text "$message"
          
          echo "‚úÖ Notification prepared (configure endpoints to enable actual sending)"
        continue-on-error: true

# ==============================================================================
# Workflow Helper Functions and Utilities
# 
# Useful Commands for Debugging:
# 
# 1. Test Configuration Locally:
#    python -c "import yaml; print('‚úÖ Valid' if yaml.safe_load(open('.github/pr-test-config.yml')) else '‚ùå Invalid')"
# 
# 2. View Current Thresholds:
#    grep -E "(auto_merge_threshold|manual_review_threshold)" .github/pr-test-config.yml
# 
# 3. Check Workflow Syntax:
#    act --list  # if you have 'act' installed for local testing
# 
# 4. Backup Configuration:
#    cp .github/pr-test-config.yml .github/pr-test-config.yml.$(date +%Y%m%d)
# 
# 5. View Validation History:
#    gh api repos/:owner/:repo/actions/runs --jq '.workflow_runs[].conclusion' | head -10
# 
# 6. Re-run Failed Validation:
#    gh api repos/:owner/:repo/actions/runs/:run_id/rerun
# 
# Troubleshooting:
# 
# ‚Ä¢ Snake case still being enforced?
#   Check: devops/consistency_checker/checker_config.yml
#   Ensure: naming_conventions is in disabled_rules
# 
# ‚Ä¢ Hard checks failing?
#   Review: Security scan results and syntax errors
#   Fix: Critical vulnerabilities and Python syntax issues
# 
# ‚Ä¢ Low scores?
#   Improve: Test coverage, documentation, linting
#   Consider: Adjusting weights in pr-test-config.yml
# 
# ‚Ä¢ Auto-merge not working?
#   Verify: Score ‚â• auto_merge_threshold
#   Check: All hard checks passed
#   Ensure: Required GitHub checks are enabled
# 
# Documentation: devops/docs/pr-validation.md
# Support: devops-team@company.com
# ==============================================================================
