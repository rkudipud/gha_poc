name: "Python Linting Check"
description: "Runs flake8 linting on Python code with both a verbose and a statistics report."

# Input parameters for the action
inputs:
  changed-only:
    description: 'Whether to lint only changed files'
    required: false
    default: 'true'
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.11.1'

# Output values from the action
outputs:
  lint-result:
    description: 'Result of the linting check (pass/fail)'
    value: ${{ steps.verify.outputs.lint-result }}
  log-path:
    description: 'Path to the main verbose lint log file'
    value: './lint_results.log'
  stats-log-path:
    description: 'Path to the statistics lint log file'
    value: './lint_stats.log'
  changed-files:
    description: 'List of Python files that were changed'
    value: ${{ steps.lint.outputs.changed-files }}

runs:
  using: 'composite'
  steps:
    # -------------------------------------------------------------------------
    # 1. Set up Python environment.
    # -------------------------------------------------------------------------
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    # -------------------------------------------------------------------------
    # 2. Install dependencies.
    #    Installs flake8 and additional linters.
    # -------------------------------------------------------------------------
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install flake8 flake8-bugbear flake8-docstrings

    # -------------------------------------------------------------------------
    # 3. Determine changed Python files if "changed-only" is true.
    #    If no files are changed, mark linting as passed.
    # -------------------------------------------------------------------------
    - name: Check for changed Python files
      id: changed
      shell: bash
      run: |
        if [[ "${{ inputs.changed-only }}" == "true" ]]; then
          # List changed files between the previous commit and this commit
          CHANGED_FILES=$(git diff --name-only --diff-filter=ACMRT ${{ github.event.before }} ${{ github.sha }} | grep '\.py$' || echo "")

          # If no Python files were changed, set output to None and skip linting
          # Also set a flag to skip linting
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No Python files changed in this push."
            echo "No Python files changed" > ./lint_results.log
            echo "changed-files=None" >> $GITHUB_OUTPUT
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Linting changed Python files: $CHANGED_FILES"
            echo "changed-files=$CHANGED_FILES" >> $GITHUB_OUTPUT
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Linting all Python files in the repository"
          echo "changed-files=all python files" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT
        fi

    # -------------------------------------------------------------------------
    # 4. Run Verbose Linting.
    #    Runs flake8 on the appropriate files (changed or all) to generate a
    #    full lint report saved as ./lint_results.log.
    # -------------------------------------------------------------------------
    - name: Run Verbose Linting
      id: lint
      if: steps.changed.outputs.skip == 'false'
      shell: bash
      run: |
        if [[ "${{ inputs.changed-only }}" == "true" ]]; then
          flake8 ${{ steps.changed.outputs['changed-files'] }} --config=./.github/actions/python-lint/.flake8 --output-file=./lint_results.log
        else
          flake8 . --config=./.github/actions/python-lint/.flake8 --output-file=./lint_results.log
        fi
        EXIT_CODE=$?
        echo "lint_exit=$EXIT_CODE" >> $GITHUB_OUTPUT
      continue-on-error: true

    # -------------------------------------------------------------------------
    # 5. Run Statistics Linting.
    #    Runs flake8 with --statistics and -q to generate a concise summary,
    #    saving output as ./lint_stats.log.
    # -------------------------------------------------------------------------
    - name: Run Stats Linting
      if: steps.changed.outputs.skip == 'false'
      shell: bash
      run: |
        if [[ "${{ inputs.changed-only }}" == "true" ]]; then
          flake8 ${{ steps.changed.outputs['changed-files'] }} --config=./.github/actions/python-lint/.flake8 --output-file=./lint_stats.log --statistics -q || true
        else
          flake8 . --config=./.github/actions/python-lint/.flake8 --output-file=./lint_stats.log --statistics -q || true
        fi

    # -------------------------------------------------------------------------
    # 6. Verify Linting Result.
    #    Checks the verbose log file for content. If non-empty, linting failed.
    # -------------------------------------------------------------------------
    - name: Verify Lint Results
      id: verify
      shell: bash
      run: |
        # If skipped, set result to pass.
        if [[ "$(cat <<< ${{ steps.changed.outputs.skip }})" == "true" ]]; then
          echo "No Python files changed. Linting skipped."
          echo "lint-result=pass" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Check if the verbose lint log file is non-empty (indicating issues)
        if [ -s ./lint_results.log ]; then
          echo "Lint failed - issues found:" 
          cat ./lint_results.log
          echo "lint-result=fail" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "Lint passed - no issues found."
          # Ensure the log file is not empty by writing a success message
          echo "No issues found" > ./lint_results.log
          echo "lint-result=pass" >> $GITHUB_OUTPUT
        fi